
PWMsignaltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000508  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000508  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000510  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000514  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000514  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001055  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000515  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011da9  00000000  00000000  000038c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002223  00000000  00000000  00015672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006339a  00000000  00000000  00017895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007ac2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a8  00000000  00000000  0007ac74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0007b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080004f0 	.word	0x080004f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080004f0 	.word	0x080004f0

0800014c <main>:
# include "stm32f1xx.h"
# include "main.h"
int counter=0 ;
int main(void)
{       //   to test PWM creation on the input of mosfet drivers IC (3.3V) and on the output of mosfet drivers IC (12V)
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	FLASHCONFIG() ;
 8000150:	f000 f842 	bl	80001d8 <FLASHCONFIG>
    	CLOCK() ;
 8000154:	f000 f854 	bl	8000200 <CLOCK>
    	POWER() ;
 8000158:	f000 f886 	bl	8000268 <POWER>
        GPIO()  ;
 800015c:	f000 f898 	bl	8000290 <GPIO>
        PWM() ;       // to create PWM signals by micro
 8000160:	f000 f8c2 	bl	80002e8 <PWM>
        TIMER()  ;
 8000164:	f000 f8f4 	bl	8000350 <TIMER>

while(1)
{


		    if(TIM2->SR & 1 == 1 && counter%2==0) {
 8000168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800016c:	691b      	ldr	r3, [r3, #16]
 800016e:	f003 0301 	and.w	r3, r3, #1
 8000172:	2b00      	cmp	r3, #0
 8000174:	d011      	beq.n	800019a <main+0x4e>
 8000176:	4b16      	ldr	r3, [pc, #88]	@ (80001d0 <main+0x84>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	f003 0301 	and.w	r3, r3, #1
 800017e:	2b00      	cmp	r3, #0
 8000180:	d10b      	bne.n	800019a <main+0x4e>
		    TIM2->SR = 0    ;   // clear update flag
 8000182:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]
			   GPIOA->BSRR = (1 << 7);        //     shutdown the mosfet drivers for 1000us
 800018a:	4b12      	ldr	r3, [pc, #72]	@ (80001d4 <main+0x88>)
 800018c:	2280      	movs	r2, #128	@ 0x80
 800018e:	611a      	str	r2, [r3, #16]
                         counter=counter+1 ;
 8000190:	4b0f      	ldr	r3, [pc, #60]	@ (80001d0 <main+0x84>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	3301      	adds	r3, #1
 8000196:	4a0e      	ldr	r2, [pc, #56]	@ (80001d0 <main+0x84>)
 8000198:	6013      	str	r3, [r2, #0]
                               }
		   if(TIM2->SR & 1 == 1 && counter%2!=0) {
 800019a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800019e:	691b      	ldr	r3, [r3, #16]
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0df      	beq.n	8000168 <main+0x1c>
 80001a8:	4b09      	ldr	r3, [pc, #36]	@ (80001d0 <main+0x84>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f003 0301 	and.w	r3, r3, #1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0d9      	beq.n	8000168 <main+0x1c>
		 		    TIM2->SR = 0    ;    //  clear update flag
 80001b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]
		 		   GPIOA->BSRR = (1 << 23);         //      disable shutdown the mosfet drivers for 1000us
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <main+0x88>)
 80001be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80001c2:	611a      	str	r2, [r3, #16]
                   counter=counter+1 ;
 80001c4:	4b02      	ldr	r3, [pc, #8]	@ (80001d0 <main+0x84>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	4a01      	ldr	r2, [pc, #4]	@ (80001d0 <main+0x84>)
 80001cc:	6013      	str	r3, [r2, #0]
		    if(TIM2->SR & 1 == 1 && counter%2==0) {
 80001ce:	e7cb      	b.n	8000168 <main+0x1c>
 80001d0:	20000020 	.word	0x20000020
 80001d4:	40010800 	.word	0x40010800

080001d8 <FLASHCONFIG>:

}


void FLASHCONFIG(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	FLASH->ACR = 2 | 1 << 4 ;        //      prefetch buffer enable , enable 2 wait states due to the sysclk frequency between 48MHz and 72MHz
 80001dc:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <FLASHCONFIG+0x24>)
 80001de:	2212      	movs	r2, #18
 80001e0:	601a      	str	r2, [r3, #0]
    while(!(FLASH->ACR &  1 << 5)) ;         // prefetch buffer enable ready flag
 80001e2:	bf00      	nop
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <FLASHCONFIG+0x24>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f9      	beq.n	80001e4 <FLASHCONFIG+0xc>


}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <CLOCK>:

void CLOCK(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

    RCC->CFGR |= (7 << 18) | (0 << 17) | (1 << 16) | (4 << 8)| (2 << 14) | (2 << 0) ;   // PLL multiplication factor = 9 , ENABLE HSE divider for PLL entry, (0 << 17)  ADC prescaler = 6, APB1 prescaler = 2 , pll selected as a system clock
 8000204:	4b14      	ldr	r3, [pc, #80]	@ (8000258 <CLOCK+0x58>)
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	4913      	ldr	r1, [pc, #76]	@ (8000258 <CLOCK+0x58>)
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <CLOCK+0x5c>)
 800020c:	4313      	orrs	r3, r2
 800020e:	604b      	str	r3, [r1, #4]

	    RCC->CR = (1 << 16) | (1 << 24) | (0 << 19)    ;   // HSE CLOCK ENABLE, PLL CLOCK ENABLE, CLOCK SECURITY DISABLE
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <CLOCK+0x58>)
 8000212:	4a13      	ldr	r2, [pc, #76]	@ (8000260 <CLOCK+0x60>)
 8000214:	601a      	str	r2, [r3, #0]
	    while(!(RCC->CFGR & 2)) ;         // PLL used as system clock ready flag
 8000216:	bf00      	nop
 8000218:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <CLOCK+0x58>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <CLOCK+0x18>
	    while(!(RCC->CR &  1 << 25)) ;         // PLL clock ready flag
 8000224:	bf00      	nop
 8000226:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <CLOCK+0x58>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f9      	beq.n	8000226 <CLOCK+0x26>
	    while(!(RCC->CR &  1 << 17)) ;         // HSE clock ready flag
 8000232:	bf00      	nop
 8000234:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <CLOCK+0x58>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0f9      	beq.n	8000234 <CLOCK+0x34>
    	RCC->APB2ENR = (1 << 0) | (15 << 2) | (1 << 11)   ;   // Alternate function IO clock enable, IO port A,B,C,D clock enable, ADC1 and ADC2 and advanced TIMER1 clock Enable
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <CLOCK+0x58>)
 8000242:	f640 023d 	movw	r2, #2109	@ 0x83d
 8000246:	619a      	str	r2, [r3, #24]
        RCC->APB1ENR = (1 << 11) | (1 << 18) | (1 << 28) | 1 ;  // Window Watchdog enable, USART3 Clock Enable and Power interface clock enable, Timer2 enable
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <CLOCK+0x58>)
 800024a:	4a06      	ldr	r2, [pc, #24]	@ (8000264 <CLOCK+0x64>)
 800024c:	61da      	str	r2, [r3, #28]

}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000
 800025c:	001d8402 	.word	0x001d8402
 8000260:	01010000 	.word	0x01010000
 8000264:	10040801 	.word	0x10040801

08000268 <POWER>:




	void POWER(void)
	{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	        PWR->CR = (9 << 4) ;    //PVD ENABLE - PVD LEVEL is 2.6V
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <POWER+0x24>)
 800026e:	2290      	movs	r2, #144	@ 0x90
 8000270:	601a      	str	r2, [r3, #0]
	        while(PWR->CSR & 1 << 2) ;   //   wait if power voltage lower than 2.6V
 8000272:	bf00      	nop
 8000274:	4b05      	ldr	r3, [pc, #20]	@ (800028c <POWER+0x24>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f9      	bne.n	8000274 <POWER+0xc>

	}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40007000 	.word	0x40007000

08000290 <GPIO>:




void GPIO(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	  GPIOA->CRL = 0x18888888    ;   //  Config SD pin (To shut down the gate drivers)
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <GPIO+0x34>)
 8000296:	4a0c      	ldr	r2, [pc, #48]	@ (80002c8 <GPIO+0x38>)
 8000298:	601a      	str	r2, [r3, #0]
      GPIOA->CRH = 0x88888899    ;   //  Config Timer1 ch1 ch2 pins
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <GPIO+0x34>)
 800029c:	4a0b      	ldr	r2, [pc, #44]	@ (80002cc <GPIO+0x3c>)
 800029e:	605a      	str	r2, [r3, #4]
      GPIOB->CRL = 0x88888888    ;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <GPIO+0x40>)
 80002a2:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 80002a6:	601a      	str	r2, [r3, #0]
      GPIOB->CRH = 0x89988888    ;   //  Config Timer ch1n ch2n
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <GPIO+0x40>)
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <GPIO+0x44>)
 80002ac:	605a      	str	r2, [r3, #4]


      GPIOC->CRH = 0x88844444 ;      // Config PC13 as Fan enable
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <GPIO+0x48>)
 80002b0:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <GPIO+0x4c>)
 80002b2:	605a      	str	r2, [r3, #4]
      GPIOD->CRL = 0x44444488 ;     //  Config OSC pins
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <GPIO+0x50>)
 80002b6:	4a0b      	ldr	r2, [pc, #44]	@ (80002e4 <GPIO+0x54>)
 80002b8:	601a      	str	r2, [r3, #0]


}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40010800 	.word	0x40010800
 80002c8:	18888888 	.word	0x18888888
 80002cc:	88888899 	.word	0x88888899
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	89988888 	.word	0x89988888
 80002d8:	40011000 	.word	0x40011000
 80002dc:	88844444 	.word	0x88844444
 80002e0:	40011400 	.word	0x40011400
 80002e4:	44444488 	.word	0x44444488

080002e8 <PWM>:



void PWM(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

       	     TIM1->PSC = 0 ;                  // prescale = 1 between APB2 and TIMER1 internal clock
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <PWM+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	629a      	str	r2, [r3, #40]	@ 0x28
			 TIM1->ARR = 0x67B ;            // triangle wave peak value = Timer ARR =1659
 80002f2:	4b16      	ldr	r3, [pc, #88]	@ (800034c <PWM+0x64>)
 80002f4:	f240 627b 	movw	r2, #1659	@ 0x67b
 80002f8:	62da      	str	r2, [r3, #44]	@ 0x2c
		     TIM1->CR1 =  (0 << 9) | (1 << 7) | (2 << 5) | (0 << 3)  ;     //   set tDTS = tCK_INT , Auto-reload preload enable, Center-aligned mode 2 to have triangle wave (for more information read reference manual), disable one-pulse mode , UEV event generation enable
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <PWM+0x64>)
 80002fc:	22c0      	movs	r2, #192	@ 0xc0
 80002fe:	601a      	str	r2, [r3, #0]
		     TIM1->CR2 = (0 << 11) | (2 << 4) ;   //  	 set OC1=OC1N=OC2=OC2N=0 after a dead-time when MOE=0	, select update mode in MMS (update event is selected as trigger output (TRGO))
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <PWM+0x64>)
 8000302:	2220      	movs	r2, #32
 8000304:	605a      	str	r2, [r3, #4]
             TIM1->SMCR = 0 << 2 ;  //    disable slave mode
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <PWM+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
		     TIM1->CCMR1 = (0 << 3) | (6 << 4) | (0 << 7) | (0 << 11) | (6 << 12) | (0 << 15) ;   // set CH1 and CH2 as an output capture, disable preload and fast for Output compare 1 and 2, set PWM mode 1 for CH1 and CH2, SET OC1Ref and OC2Ref is not affected by the ETRF Input
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <PWM+0x64>)
 800030e:	f246 0260 	movw	r2, #24672	@ 0x6060
 8000312:	619a      	str	r2, [r3, #24]

		     TIM1->CCR1 = 0x33E  ;      //  set Duty Cycle=0.5
 8000314:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <PWM+0x64>)
 8000316:	f240 323e 	movw	r2, #830	@ 0x33e
 800031a:	635a      	str	r2, [r3, #52]	@ 0x34
			 TIM1->CCR2 = 0x33E  ;     // set Duty Cycle=0.5
 800031c:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <PWM+0x64>)
 800031e:	f240 323e 	movw	r2, #830	@ 0x33e
 8000322:	639a      	str	r2, [r3, #56]	@ 0x38

		     TIM1->CCER = 5 | (5 << 4)    ;    //    enable CH1 and CH1N , enable CH2 and CH2N
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <PWM+0x64>)
 8000326:	2255      	movs	r2, #85	@ 0x55
 8000328:	621a      	str	r2, [r3, #32]
		     TIM1->BDTR = 6 | (1 << 7) | (1 << 14)   ;         //  set deadtime = 2us , Automatic output enable
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <PWM+0x64>)
 800032c:	f244 0286 	movw	r2, #16518	@ 0x4086
 8000330:	645a      	str	r2, [r3, #68]	@ 0x44
			 TIM1->CR1 |= 1  ;      //   enable the PWM Timer1
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <PWM+0x64>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a05      	ldr	r2, [pc, #20]	@ (800034c <PWM+0x64>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6013      	str	r3, [r2, #0]
             TIM1->RCR = 1  ;      // to create update event just on the every underflow during each period time
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <PWM+0x64>)
 8000340:	2201      	movs	r2, #1
 8000342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40012c00 	.word	0x40012c00

08000350 <TIMER>:



void TIMER(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	TIM2->PSC = 1 ;   // prescale = 1 between APB1 timer and TIMER2 internal clock
 8000354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000358:	2201      	movs	r2, #1
 800035a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0x8236 ;  // Timer counter value = 33334 , ~1000us
 800035c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000360:	f248 2236 	movw	r2, #33334	@ 0x8236
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 =  1 ;  //   enable Timer2 , upcounter mode
 8000366:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]

}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800037a:	bf00      	nop
 800037c:	e7fd      	b.n	800037a <NMI_Handler+0x4>

0800037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000382:	bf00      	nop
 8000384:	e7fd      	b.n	8000382 <HardFault_Handler+0x4>

08000386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	bf00      	nop
 8000394:	e7fd      	b.n	8000392 <BusFault_Handler+0x4>

08000396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039a:	bf00      	nop
 800039c:	e7fd      	b.n	800039a <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c6:	f000 f85d 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <SystemInit+0x5c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <SystemInit+0x5c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <SystemInit+0x5c>)
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	4911      	ldr	r1, [pc, #68]	@ (800042c <SystemInit+0x5c>)
 80003e6:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <SystemInit+0x60>)
 80003e8:	4013      	ands	r3, r2
 80003ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <SystemInit+0x5c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <SystemInit+0x5c>)
 80003f2:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80003f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80003fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <SystemInit+0x5c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <SystemInit+0x5c>)
 8000402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000406:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <SystemInit+0x5c>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a07      	ldr	r2, [pc, #28]	@ (800042c <SystemInit+0x5c>)
 800040e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000412:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <SystemInit+0x5c>)
 8000416:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800041a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800041c:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <SystemInit+0x64>)
 800041e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000422:	609a      	str	r2, [r3, #8]
#endif 
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	f8ff0000 	.word	0xf8ff0000
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000438:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800043a:	e003      	b.n	8000444 <LoopCopyDataInit>

0800043c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800043e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000440:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000442:	3104      	adds	r1, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000444:	480a      	ldr	r0, [pc, #40]	@ (8000470 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000448:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800044c:	d3f6      	bcc.n	800043c <CopyDataInit>
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000450:	e002      	b.n	8000458 <LoopFillZerobss>

08000452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000454:	f842 3b04 	str.w	r3, [r2], #4

08000458 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800045a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800045c:	d3f9      	bcc.n	8000452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045e:	f7ff ffb7 	bl	80003d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000462:	f000 f821 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff fe71 	bl	800014c <main>
  bx lr
 800046a:	4770      	bx	lr
  ldr r3, =_sidata
 800046c:	08000510 	.word	0x08000510
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000474:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000478:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800047c:	20000028 	.word	0x20000028

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a03      	ldr	r2, [pc, #12]	@ (80004a4 <HAL_IncTick+0x20>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000024 	.word	0x20000024

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2600      	movs	r6, #0
 80004ac:	4d0c      	ldr	r5, [pc, #48]	@ (80004e0 <__libc_init_array+0x38>)
 80004ae:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	f000 f81a 	bl	80004f0 <_init>
 80004bc:	2600      	movs	r6, #0
 80004be:	4d0a      	ldr	r5, [pc, #40]	@ (80004e8 <__libc_init_array+0x40>)
 80004c0:	4c0a      	ldr	r4, [pc, #40]	@ (80004ec <__libc_init_array+0x44>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
